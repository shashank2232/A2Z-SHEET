//  USING RECURSION SINGLE POINTER   TIME-> O(n/2) as we're going only till the half of the string
int isPalindromeHelper(int i, int n,string &S){

         if(i>=n/2){
         return 1;
         }

         if(S[i]!=S[n-i-1]){
         return 0;    
         }

      return isPalindromeHelper(i+1,n,S);

     }

 int isPalindrome(string S){

     int ans = isPalindromeHelper(0,S.size(),S);
     return ans;
     }
	
	// OR USING 2-POINTER RECURSION
// 	int isPalindromeHelper(int l, int r,string &S){

//          if(l>=r)return 1;

//          if(S[l]!=S[r]) return 0;    

//       return isPalindromeHelper(l+1,r-1,S);

//      }

//  int isPalindrome(string S){

//      int ans = isPalindromeHelper(0,S.size()-1,S);
//      return ans;
//      }

I/P S = "abba"             Input: S = "abc" 
O/P 1                      O/P 0
